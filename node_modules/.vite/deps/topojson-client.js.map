{
  "version": 3,
  "sources": ["../../topojson-client/src/identity.js", "../../topojson-client/src/transform.js", "../../topojson-client/src/bbox.js", "../../topojson-client/src/reverse.js", "../../topojson-client/src/feature.js", "../../topojson-client/src/stitch.js", "../../topojson-client/src/mesh.js", "../../topojson-client/src/merge.js", "../../topojson-client/src/bisect.js", "../../topojson-client/src/neighbors.js", "../../topojson-client/src/untransform.js", "../../topojson-client/src/quantize.js"],
  "sourcesContent": ["export default function(x) {\r\n  return x;\r\n}\r\n", "import identity from \"./identity.js\";\r\n\r\nexport default function(transform) {\r\n  if (transform == null) return identity;\r\n  var x0,\r\n      y0,\r\n      kx = transform.scale[0],\r\n      ky = transform.scale[1],\r\n      dx = transform.translate[0],\r\n      dy = transform.translate[1];\r\n  return function(input, i) {\r\n    if (!i) x0 = y0 = 0;\r\n    var j = 2, n = input.length, output = new Array(n);\r\n    output[0] = (x0 += input[0]) * kx + dx;\r\n    output[1] = (y0 += input[1]) * ky + dy;\r\n    while (j < n) output[j] = input[j], ++j;\r\n    return output;\r\n  };\r\n}\r\n", "import transform from \"./transform.js\";\r\n\r\nexport default function(topology) {\r\n  var t = transform(topology.transform), key,\r\n      x0 = Infinity, y0 = x0, x1 = -x0, y1 = -x0;\r\n\r\n  function bboxPoint(p) {\r\n    p = t(p);\r\n    if (p[0] < x0) x0 = p[0];\r\n    if (p[0] > x1) x1 = p[0];\r\n    if (p[1] < y0) y0 = p[1];\r\n    if (p[1] > y1) y1 = p[1];\r\n  }\r\n\r\n  function bboxGeometry(o) {\r\n    switch (o.type) {\r\n      case \"GeometryCollection\": o.geometries.forEach(bboxGeometry); break;\r\n      case \"Point\": bboxPoint(o.coordinates); break;\r\n      case \"MultiPoint\": o.coordinates.forEach(bboxPoint); break;\r\n    }\r\n  }\r\n\r\n  topology.arcs.forEach(function(arc) {\r\n    var i = -1, n = arc.length, p;\r\n    while (++i < n) {\r\n      p = t(arc[i], i);\r\n      if (p[0] < x0) x0 = p[0];\r\n      if (p[0] > x1) x1 = p[0];\r\n      if (p[1] < y0) y0 = p[1];\r\n      if (p[1] > y1) y1 = p[1];\r\n    }\r\n  });\r\n\r\n  for (key in topology.objects) {\r\n    bboxGeometry(topology.objects[key]);\r\n  }\r\n\r\n  return [x0, y0, x1, y1];\r\n}\r\n", "export default function(array, n) {\r\n  var t, j = array.length, i = j - n;\r\n  while (i < --j) t = array[i], array[i++] = array[j], array[j] = t;\r\n}\r\n", "import reverse from \"./reverse.js\";\r\nimport transform from \"./transform.js\";\r\n\r\nexport default function(topology, o) {\r\n  if (typeof o === \"string\") o = topology.objects[o];\r\n  return o.type === \"GeometryCollection\"\r\n      ? {type: \"FeatureCollection\", features: o.geometries.map(function(o) { return feature(topology, o); })}\r\n      : feature(topology, o);\r\n}\r\n\r\nfunction feature(topology, o) {\r\n  var id = o.id,\r\n      bbox = o.bbox,\r\n      properties = o.properties == null ? {} : o.properties,\r\n      geometry = object(topology, o);\r\n  return id == null && bbox == null ? {type: \"Feature\", properties: properties, geometry: geometry}\r\n      : bbox == null ? {type: \"Feature\", id: id, properties: properties, geometry: geometry}\r\n      : {type: \"Feature\", id: id, bbox: bbox, properties: properties, geometry: geometry};\r\n}\r\n\r\nexport function object(topology, o) {\r\n  var transformPoint = transform(topology.transform),\r\n      arcs = topology.arcs;\r\n\r\n  function arc(i, points) {\r\n    if (points.length) points.pop();\r\n    for (var a = arcs[i < 0 ? ~i : i], k = 0, n = a.length; k < n; ++k) {\r\n      points.push(transformPoint(a[k], k));\r\n    }\r\n    if (i < 0) reverse(points, n);\r\n  }\r\n\r\n  function point(p) {\r\n    return transformPoint(p);\r\n  }\r\n\r\n  function line(arcs) {\r\n    var points = [];\r\n    for (var i = 0, n = arcs.length; i < n; ++i) arc(arcs[i], points);\r\n    if (points.length < 2) points.push(points[0]); // This should never happen per the specification.\r\n    return points;\r\n  }\r\n\r\n  function ring(arcs) {\r\n    var points = line(arcs);\r\n    while (points.length < 4) points.push(points[0]); // This may happen if an arc has only two points.\r\n    return points;\r\n  }\r\n\r\n  function polygon(arcs) {\r\n    return arcs.map(ring);\r\n  }\r\n\r\n  function geometry(o) {\r\n    var type = o.type, coordinates;\r\n    switch (type) {\r\n      case \"GeometryCollection\": return {type: type, geometries: o.geometries.map(geometry)};\r\n      case \"Point\": coordinates = point(o.coordinates); break;\r\n      case \"MultiPoint\": coordinates = o.coordinates.map(point); break;\r\n      case \"LineString\": coordinates = line(o.arcs); break;\r\n      case \"MultiLineString\": coordinates = o.arcs.map(line); break;\r\n      case \"Polygon\": coordinates = polygon(o.arcs); break;\r\n      case \"MultiPolygon\": coordinates = o.arcs.map(polygon); break;\r\n      default: return null;\r\n    }\r\n    return {type: type, coordinates: coordinates};\r\n  }\r\n\r\n  return geometry(o);\r\n}\r\n", "export default function(topology, arcs) {\r\n  var stitchedArcs = {},\r\n      fragmentByStart = {},\r\n      fragmentByEnd = {},\r\n      fragments = [],\r\n      emptyIndex = -1;\r\n\r\n  // Stitch empty arcs first, since they may be subsumed by other arcs.\r\n  arcs.forEach(function(i, j) {\r\n    var arc = topology.arcs[i < 0 ? ~i : i], t;\r\n    if (arc.length < 3 && !arc[1][0] && !arc[1][1]) {\r\n      t = arcs[++emptyIndex], arcs[emptyIndex] = i, arcs[j] = t;\r\n    }\r\n  });\r\n\r\n  arcs.forEach(function(i) {\r\n    var e = ends(i),\r\n        start = e[0],\r\n        end = e[1],\r\n        f, g;\r\n\r\n    if (f = fragmentByEnd[start]) {\r\n      delete fragmentByEnd[f.end];\r\n      f.push(i);\r\n      f.end = end;\r\n      if (g = fragmentByStart[end]) {\r\n        delete fragmentByStart[g.start];\r\n        var fg = g === f ? f : f.concat(g);\r\n        fragmentByStart[fg.start = f.start] = fragmentByEnd[fg.end = g.end] = fg;\r\n      } else {\r\n        fragmentByStart[f.start] = fragmentByEnd[f.end] = f;\r\n      }\r\n    } else if (f = fragmentByStart[end]) {\r\n      delete fragmentByStart[f.start];\r\n      f.unshift(i);\r\n      f.start = start;\r\n      if (g = fragmentByEnd[start]) {\r\n        delete fragmentByEnd[g.end];\r\n        var gf = g === f ? f : g.concat(f);\r\n        fragmentByStart[gf.start = g.start] = fragmentByEnd[gf.end = f.end] = gf;\r\n      } else {\r\n        fragmentByStart[f.start] = fragmentByEnd[f.end] = f;\r\n      }\r\n    } else {\r\n      f = [i];\r\n      fragmentByStart[f.start = start] = fragmentByEnd[f.end = end] = f;\r\n    }\r\n  });\r\n\r\n  function ends(i) {\r\n    var arc = topology.arcs[i < 0 ? ~i : i], p0 = arc[0], p1;\r\n    if (topology.transform) p1 = [0, 0], arc.forEach(function(dp) { p1[0] += dp[0], p1[1] += dp[1]; });\r\n    else p1 = arc[arc.length - 1];\r\n    return i < 0 ? [p1, p0] : [p0, p1];\r\n  }\r\n\r\n  function flush(fragmentByEnd, fragmentByStart) {\r\n    for (var k in fragmentByEnd) {\r\n      var f = fragmentByEnd[k];\r\n      delete fragmentByStart[f.start];\r\n      delete f.start;\r\n      delete f.end;\r\n      f.forEach(function(i) { stitchedArcs[i < 0 ? ~i : i] = 1; });\r\n      fragments.push(f);\r\n    }\r\n  }\r\n\r\n  flush(fragmentByEnd, fragmentByStart);\r\n  flush(fragmentByStart, fragmentByEnd);\r\n  arcs.forEach(function(i) { if (!stitchedArcs[i < 0 ? ~i : i]) fragments.push([i]); });\r\n\r\n  return fragments;\r\n}\r\n", "import {object} from \"./feature.js\";\r\nimport stitch from \"./stitch.js\";\r\n\r\nexport default function(topology) {\r\n  return object(topology, meshArcs.apply(this, arguments));\r\n}\r\n\r\nexport function meshArcs(topology, object, filter) {\r\n  var arcs, i, n;\r\n  if (arguments.length > 1) arcs = extractArcs(topology, object, filter);\r\n  else for (i = 0, arcs = new Array(n = topology.arcs.length); i < n; ++i) arcs[i] = i;\r\n  return {type: \"MultiLineString\", arcs: stitch(topology, arcs)};\r\n}\r\n\r\nfunction extractArcs(topology, object, filter) {\r\n  var arcs = [],\r\n      geomsByArc = [],\r\n      geom;\r\n\r\n  function extract0(i) {\r\n    var j = i < 0 ? ~i : i;\r\n    (geomsByArc[j] || (geomsByArc[j] = [])).push({i: i, g: geom});\r\n  }\r\n\r\n  function extract1(arcs) {\r\n    arcs.forEach(extract0);\r\n  }\r\n\r\n  function extract2(arcs) {\r\n    arcs.forEach(extract1);\r\n  }\r\n\r\n  function extract3(arcs) {\r\n    arcs.forEach(extract2);\r\n  }\r\n\r\n  function geometry(o) {\r\n    switch (geom = o, o.type) {\r\n      case \"GeometryCollection\": o.geometries.forEach(geometry); break;\r\n      case \"LineString\": extract1(o.arcs); break;\r\n      case \"MultiLineString\": case \"Polygon\": extract2(o.arcs); break;\r\n      case \"MultiPolygon\": extract3(o.arcs); break;\r\n    }\r\n  }\r\n\r\n  geometry(object);\r\n\r\n  geomsByArc.forEach(filter == null\r\n      ? function(geoms) { arcs.push(geoms[0].i); }\r\n      : function(geoms) { if (filter(geoms[0].g, geoms[geoms.length - 1].g)) arcs.push(geoms[0].i); });\r\n\r\n  return arcs;\r\n}\r\n", "import {object} from \"./feature.js\";\r\nimport stitch from \"./stitch.js\";\r\n\r\nfunction planarRingArea(ring) {\r\n  var i = -1, n = ring.length, a, b = ring[n - 1], area = 0;\r\n  while (++i < n) a = b, b = ring[i], area += a[0] * b[1] - a[1] * b[0];\r\n  return Math.abs(area); // Note: doubled area!\r\n}\r\n\r\nexport default function(topology) {\r\n  return object(topology, mergeArcs.apply(this, arguments));\r\n}\r\n\r\nexport function mergeArcs(topology, objects) {\r\n  var polygonsByArc = {},\r\n      polygons = [],\r\n      groups = [];\r\n\r\n  objects.forEach(geometry);\r\n\r\n  function geometry(o) {\r\n    switch (o.type) {\r\n      case \"GeometryCollection\": o.geometries.forEach(geometry); break;\r\n      case \"Polygon\": extract(o.arcs); break;\r\n      case \"MultiPolygon\": o.arcs.forEach(extract); break;\r\n    }\r\n  }\r\n\r\n  function extract(polygon) {\r\n    polygon.forEach(function(ring) {\r\n      ring.forEach(function(arc) {\r\n        (polygonsByArc[arc = arc < 0 ? ~arc : arc] || (polygonsByArc[arc] = [])).push(polygon);\r\n      });\r\n    });\r\n    polygons.push(polygon);\r\n  }\r\n\r\n  function area(ring) {\r\n    return planarRingArea(object(topology, {type: \"Polygon\", arcs: [ring]}).coordinates[0]);\r\n  }\r\n\r\n  polygons.forEach(function(polygon) {\r\n    if (!polygon._) {\r\n      var group = [],\r\n          neighbors = [polygon];\r\n      polygon._ = 1;\r\n      groups.push(group);\r\n      while (polygon = neighbors.pop()) {\r\n        group.push(polygon);\r\n        polygon.forEach(function(ring) {\r\n          ring.forEach(function(arc) {\r\n            polygonsByArc[arc < 0 ? ~arc : arc].forEach(function(polygon) {\r\n              if (!polygon._) {\r\n                polygon._ = 1;\r\n                neighbors.push(polygon);\r\n              }\r\n            });\r\n          });\r\n        });\r\n      }\r\n    }\r\n  });\r\n\r\n  polygons.forEach(function(polygon) {\r\n    delete polygon._;\r\n  });\r\n\r\n  return {\r\n    type: \"MultiPolygon\",\r\n    arcs: groups.map(function(polygons) {\r\n      var arcs = [], n;\r\n\r\n      // Extract the exterior (unique) arcs.\r\n      polygons.forEach(function(polygon) {\r\n        polygon.forEach(function(ring) {\r\n          ring.forEach(function(arc) {\r\n            if (polygonsByArc[arc < 0 ? ~arc : arc].length < 2) {\r\n              arcs.push(arc);\r\n            }\r\n          });\r\n        });\r\n      });\r\n\r\n      // Stitch the arcs into one or more rings.\r\n      arcs = stitch(topology, arcs);\r\n\r\n      // If more than one ring is returned,\r\n      // at most one of these rings can be the exterior;\r\n      // choose the one with the greatest absolute area.\r\n      if ((n = arcs.length) > 1) {\r\n        for (var i = 1, k = area(arcs[0]), ki, t; i < n; ++i) {\r\n          if ((ki = area(arcs[i])) > k) {\r\n            t = arcs[0], arcs[0] = arcs[i], arcs[i] = t, k = ki;\r\n          }\r\n        }\r\n      }\r\n\r\n      return arcs;\r\n    }).filter(function(arcs) {\r\n      return arcs.length > 0;\r\n    })\r\n  };\r\n}\r\n", "export default function(a, x) {\r\n  var lo = 0, hi = a.length;\r\n  while (lo < hi) {\r\n    var mid = lo + hi >>> 1;\r\n    if (a[mid] < x) lo = mid + 1;\r\n    else hi = mid;\r\n  }\r\n  return lo;\r\n}\r\n", "import bisect from \"./bisect.js\";\r\n\r\nexport default function(objects) {\r\n  var indexesByArc = {}, // arc index -> array of object indexes\r\n      neighbors = objects.map(function() { return []; });\r\n\r\n  function line(arcs, i) {\r\n    arcs.forEach(function(a) {\r\n      if (a < 0) a = ~a;\r\n      var o = indexesByArc[a];\r\n      if (o) o.push(i);\r\n      else indexesByArc[a] = [i];\r\n    });\r\n  }\r\n\r\n  function polygon(arcs, i) {\r\n    arcs.forEach(function(arc) { line(arc, i); });\r\n  }\r\n\r\n  function geometry(o, i) {\r\n    if (o.type === \"GeometryCollection\") o.geometries.forEach(function(o) { geometry(o, i); });\r\n    else if (o.type in geometryType) geometryType[o.type](o.arcs, i);\r\n  }\r\n\r\n  var geometryType = {\r\n    LineString: line,\r\n    MultiLineString: polygon,\r\n    Polygon: polygon,\r\n    MultiPolygon: function(arcs, i) { arcs.forEach(function(arc) { polygon(arc, i); }); }\r\n  };\r\n\r\n  objects.forEach(geometry);\r\n\r\n  for (var i in indexesByArc) {\r\n    for (var indexes = indexesByArc[i], m = indexes.length, j = 0; j < m; ++j) {\r\n      for (var k = j + 1; k < m; ++k) {\r\n        var ij = indexes[j], ik = indexes[k], n;\r\n        if ((n = neighbors[ij])[i = bisect(n, ik)] !== ik) n.splice(i, 0, ik);\r\n        if ((n = neighbors[ik])[i = bisect(n, ij)] !== ij) n.splice(i, 0, ij);\r\n      }\r\n    }\r\n  }\r\n\r\n  return neighbors;\r\n}\r\n", "import identity from \"./identity.js\";\r\n\r\nexport default function(transform) {\r\n  if (transform == null) return identity;\r\n  var x0,\r\n      y0,\r\n      kx = transform.scale[0],\r\n      ky = transform.scale[1],\r\n      dx = transform.translate[0],\r\n      dy = transform.translate[1];\r\n  return function(input, i) {\r\n    if (!i) x0 = y0 = 0;\r\n    var j = 2,\r\n        n = input.length,\r\n        output = new Array(n),\r\n        x1 = Math.round((input[0] - dx) / kx),\r\n        y1 = Math.round((input[1] - dy) / ky);\r\n    output[0] = x1 - x0, x0 = x1;\r\n    output[1] = y1 - y0, y0 = y1;\r\n    while (j < n) output[j] = input[j], ++j;\r\n    return output;\r\n  };\r\n}\r\n", "import bbox from \"./bbox.js\";\r\nimport untransform from \"./untransform.js\";\r\n\r\nexport default function(topology, transform) {\r\n  if (topology.transform) throw new Error(\"already quantized\");\r\n\r\n  if (!transform || !transform.scale) {\r\n    if (!((n = Math.floor(transform)) >= 2)) throw new Error(\"n must be ≥2\");\r\n    box = topology.bbox || bbox(topology);\r\n    var x0 = box[0], y0 = box[1], x1 = box[2], y1 = box[3], n;\r\n    transform = {scale: [x1 - x0 ? (x1 - x0) / (n - 1) : 1, y1 - y0 ? (y1 - y0) / (n - 1) : 1], translate: [x0, y0]};\r\n  } else {\r\n    box = topology.bbox;\r\n  }\r\n\r\n  var t = untransform(transform), box, key, inputs = topology.objects, outputs = {};\r\n\r\n  function quantizePoint(point) {\r\n    return t(point);\r\n  }\r\n\r\n  function quantizeGeometry(input) {\r\n    var output;\r\n    switch (input.type) {\r\n      case \"GeometryCollection\": output = {type: \"GeometryCollection\", geometries: input.geometries.map(quantizeGeometry)}; break;\r\n      case \"Point\": output = {type: \"Point\", coordinates: quantizePoint(input.coordinates)}; break;\r\n      case \"MultiPoint\": output = {type: \"MultiPoint\", coordinates: input.coordinates.map(quantizePoint)}; break;\r\n      default: return input;\r\n    }\r\n    if (input.id != null) output.id = input.id;\r\n    if (input.bbox != null) output.bbox = input.bbox;\r\n    if (input.properties != null) output.properties = input.properties;\r\n    return output;\r\n  }\r\n\r\n  function quantizeArc(input) {\r\n    var i = 0, j = 1, n = input.length, p, output = new Array(n); // pessimistic\r\n    output[0] = t(input[0], 0);\r\n    while (++i < n) if ((p = t(input[i], i))[0] || p[1]) output[j++] = p; // non-coincident points\r\n    if (j === 1) output[j++] = [0, 0]; // an arc must have at least two points\r\n    output.length = j;\r\n    return output;\r\n  }\r\n\r\n  for (key in inputs) outputs[key] = quantizeGeometry(inputs[key]);\r\n\r\n  return {\r\n    type: \"Topology\",\r\n    bbox: box,\r\n    transform: transform,\r\n    objects: outputs,\r\n    arcs: topology.arcs.map(quantizeArc)\r\n  };\r\n}\r\n"],
  "mappings": "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",
  "names": ["o", "arcs", "fragmentByEnd", "fragmentByStart", "object", "arcs", "polygon", "polygons", "i", "o", "n"]
}
